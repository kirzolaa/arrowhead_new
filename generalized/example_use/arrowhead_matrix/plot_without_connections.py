#!/usr/bin/env python3
"""
Script to re-plot the eigenvalues and eigenvectors without connecting the points.
This uses the existing data files generated by generate_4x4_arrowhead.py.
"""

import os
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def plot_eigenvalues_without_connections(theta_values, all_eigenvalues, output_dir="./results"):
    """
    Plot eigenvalues for different theta values in 3D without connecting the points.
    
    Parameters:
    -----------
    theta_values : list of float
        List of theta values in radians
    all_eigenvalues : list of numpy.ndarray
        List of eigenvalues for each theta
    output_dir : str
        Directory to save the plot
    """
    fig = plt.figure(figsize=(12, 10))
    ax = fig.add_subplot(111, projection='3d')
    
    # Convert theta values to degrees for display
    theta_values_deg = np.degrees(theta_values)
    
    # Prepare data for 3D scatter plot
    x = []  # Theta values
    y = []  # Eigenvalue indices
    z = []  # Eigenvalue values
    c = []  # Colors based on eigenvalue index
    
    # Colors for different eigenvalues
    colors = ['r', 'g', 'b', 'purple']
    
    # For each theta value
    for i, (theta, eigenvalues) in enumerate(zip(theta_values_deg, all_eigenvalues)):
        # For each eigenvalue
        for j, eigenvalue in enumerate(eigenvalues):
            x.append(theta)
            y.append(j)
            z.append(eigenvalue)
            c.append(colors[j])
    
    # Create scatter plot
    ax.scatter(x, y, z, c=c, marker='o', s=50)
    
    # Set labels and title
    ax.set_xlabel('Theta (degrees)')
    ax.set_ylabel('Eigenvalue Index')
    ax.set_zlabel('Eigenvalue')
    ax.set_title('Eigenvalues vs Theta (No Connections)')
    
    # Set y-axis ticks to integers
    ax.set_yticks(range(4))
    
    # Add a legend
    legend_elements = [
        plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=colors[i], 
                  markersize=10, label=f'Eigenvalue {i}') for i in range(4)
    ]
    ax.legend(handles=legend_elements, loc='upper right')
    
    # Save the plot
    plt.savefig(os.path.join(output_dir, "eigenvalues_no_connections.png"), dpi=300, bbox_inches='tight')
    plt.close()

def plot_eigenvectors_without_connections(theta_values, all_eigenvectors, output_dir="./results"):
    """
    Plot the eigenvector endpoints for all theta values in 3D space without connecting them.
    Shows all 4 eigenvector endpoints for each matrix.
    
    Parameters:
    -----------
    theta_values : list of float
        List of theta values in radians
    all_eigenvectors : list of numpy.ndarray
        List of eigenvectors for each theta
    output_dir : str
        Directory to save the plots
    """
    # Create a figure for all eigenvector endpoints
    fig = plt.figure(figsize=(14, 12))
    ax = fig.add_subplot(111, projection='3d')
    
    # Convert theta values to degrees for display
    theta_values_deg = np.degrees(theta_values)
    
    # Colors for different eigenvalues
    ev_colors = ['r', 'g', 'b', 'purple']
    
    # Markers for different theta values
    markers = ['o', 's', '^', 'd', 'p', '*', 'h', 'x']  # Different marker styles
    
    # For each theta value
    for i, (theta, eigenvectors) in enumerate(zip(theta_values_deg, all_eigenvectors)):
        # For each eigenvector (0-3) of this matrix
        for ev_idx in range(4):
            # Get the eigenvector
            eigenvector = eigenvectors[:, ev_idx]
            
            # Plot the eigenvector endpoint
            ax.scatter(eigenvector[1], eigenvector[2], eigenvector[3], 
                      c=ev_colors[ev_idx], marker=markers[i % len(markers)], s=80, 
                      alpha=0.8, label=f'θ={theta:.1f}°, ev{ev_idx}' if ev_idx == 0 and i < 8 else "")
            
            # Add text label with theta value
            ax.text(eigenvector[1], eigenvector[2], eigenvector[3], 
                   f'{theta:.1f}°', size=8)
    
    # Set labels and title
    ax.set_xlabel('X Component')
    ax.set_ylabel('Y Component')
    ax.set_zlabel('Z Component')
    ax.set_title('Eigenvector Endpoints for Different Theta Values (No Connections)')
    
    # Set equal aspect ratio
    ax.set_box_aspect([1, 1, 1])
    
    # Add a legend for the eigenvector colors
    legend_elements = [
        plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=ev_colors[i], 
                  markersize=10, label=f'Eigenvector {i}') for i in range(4)
    ]
    ax.legend(handles=legend_elements, loc='upper right')
    
    # Save the plot
    plt.savefig(os.path.join(output_dir, "eigenvectors_no_connections.png"), dpi=300, bbox_inches='tight')
    plt.close()

def main():
    """
    Main function to load saved eigenvalues and eigenvectors and create plots without connections.
    """
    # Parameters
    results_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'results')
    
    # Load all eigenvalues and eigenvectors
    all_eigenvalues = []
    all_eigenvectors = []
    theta_values = []
    
    # Find all eigenvalue files
    i = 0
    while True:
        eigenvalues_file = os.path.join(results_dir, f"eigenvalues_theta_{i}.npy")
        eigenvectors_file = os.path.join(results_dir, f"eigenvectors_theta_{i}.npy")
        
        if not os.path.exists(eigenvalues_file) or not os.path.exists(eigenvectors_file):
            break
            
        # Load the data
        eigenvalues = np.load(eigenvalues_file)
        eigenvectors = np.load(eigenvectors_file)
        
        all_eigenvalues.append(eigenvalues)
        all_eigenvectors.append(eigenvectors)
        
        # For simplicity, we'll assume theta values are evenly spaced from 0 to 2π
        # This is just for visualization purposes
        if i == 0:
            total_files = sum(1 for f in os.listdir(results_dir) if f.startswith("eigenvalues_theta_"))
            theta_values = np.linspace(0, 2*np.pi, total_files, endpoint=False)
        
        i += 1
    
    if not all_eigenvalues:
        print("No eigenvalue/eigenvector files found. Please run generate_4x4_arrowhead.py first.")
        return
    
    print(f"Found {len(all_eigenvalues)} sets of eigenvalues and eigenvectors.")
    print("Creating plots without connections...")
    
    # Create the plots
    plot_eigenvalues_without_connections(theta_values, all_eigenvalues, results_dir)
    plot_eigenvectors_without_connections(theta_values, all_eigenvectors, results_dir)
    
    print("Plots created successfully:")
    print(f"  - {os.path.join(results_dir, 'eigenvalues_no_connections.png')}")
    print(f"  - {os.path.join(results_dir, 'eigenvectors_no_connections.png')}")

if __name__ == "__main__":
    main()
