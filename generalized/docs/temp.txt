                     Orthogonal Vector Visualization System
                                        Technical Documentation
                                               March 5, 2025


                                                   Abstract
          This document provides a comprehensive guide to the Orthogonal Vector Visualization System.
      The system is a flexible Python tool for generating and visualizing complex orthogonal vector config-
      urations with advanced plotting capabilities. It generates a single R vector using scalar formulas and
      provides comprehensive visualization options for both single and multiple vectors. This document
      covers the mathematical formulation, implementation details, API reference, usage examples, and
      visualization techniques, with a focus on the circle/sphere pattern generation examples.


Contents
1 Introduction                                                                                                 4
  1.1 Project Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
  1.2 Key Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
  1.3 Package Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        4
  1.4 Document Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         4

2 Mathematical Formulation                                                                                     5
  2.1 Scalar Formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       5
  2.2 Mathematical Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        5
      2.2.1 Orthogonality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        5
      2.2.2 Invariance to Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         5
      2.2.3 Invariance to Rotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         5
      2.2.4 Scaling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        6
  2.3 Geometric Interpretation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
  2.4 Circle and Sphere Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         6

3 Implementation                                                                                               6
  3.1 Modular Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         6
  3.2 Vector Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        6
  3.3 Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
  3.4 Configuration Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           7
  3.5 Command-line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         7
  3.6 Circle Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        8
  3.7 Dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       8

4 API Reference                                                                                                 8
  4.1 vector utils Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       8
      4.1.1 create orthogonal vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           8
      4.1.2 check orthogonality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           8
      4.1.3 calculate displacement vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            9
      4.1.4 calculate dot products . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          9
  4.2 visualization Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        9
      4.2.1 plot vectors 3d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         9
      4.2.2 plot vectors 2d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        10
      4.2.3 plot vectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       10
  4.3 config Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      10
      4.3.1 VectorConfig Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         10


                                                        1
Orthogonal Vectors Generator                                                    Generalized Implementation


         4.3.2 VectorConfig.save to file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   11
         4.3.3 VectorConfig.load from file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
   4.4   main Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   11
         4.4.1 main Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
   4.5     init Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   11

5 Usage Examples                                                                                             12
  5.1 Basic Usage as a Python Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         12
  5.2 Customizing Vector Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        12
  5.3 Using the VectorConfig Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       12
  5.4 Saving and Loading Configurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        13
  5.5 Checking Orthogonality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       13
  5.6 Using the Command-line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         14
      5.6.1 Basic Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      14
      5.6.2 Customizing Vector Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          14
      5.6.3 Customizing Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        14
      5.6.4 Using a Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       14
      5.6.5 Saving a Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        14
  5.7 Complete Example Script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        14

6 Visualization                                                                                              15
  6.1 3D Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     15
  6.2 2D Projections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     16
  6.3 Endpoints-only Plotting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      17
  6.4 Multiple Vector Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      18
  6.5 Circle Examples Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      18
  6.6 Implementation Details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       19
  6.7 Visualization in the Command-line Interface . . . . . . . . . . . . . . . . . . . . . . . . . .        20

7 Configuration                                                                                              20
  7.1 VectorConfig Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     20
  7.2 Initializing a Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     20
  7.3 Using a Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      21
  7.4 Saving a Configuration to a File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       21
  7.5 Loading a Configuration from a File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        21
  7.6 Configuration in the Command-line Interface . . . . . . . . . . . . . . . . . . . . . . . . .          21
  7.7 Configuration File Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      22
  7.8 Default Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      22

8 Command-line Interface                                                                                     22
  8.1 Basic Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    22
  8.2 Command-line Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       22
  8.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     23
      8.3.1 Generating a Single Vector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         23
      8.3.2 Generating Multiple Vectors with Distance Range . . . . . . . . . . . . . . . . . .              23
      8.3.3 Generating Multiple Vectors with Angle Range . . . . . . . . . . . . . . . . . . . .             23
      8.3.4 Endpoints-only Plotting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        23
      8.3.5 Saving Plots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       23
      8.3.6 Using a Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       23
      8.3.7 Saving a Configuration File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        24
  8.4 Circle Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      24
  8.5 Implementation Details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       24
  8.6 Error Handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     24
  8.7 Help Message . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     24




                                                      2
Orthogonal Vectors Generator                                                     Generalized Implementation


9 Example Results                                                                                             25
  9.1 Single Vector Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      25
      9.1.1 Scalar Formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        25
      9.1.2 3D Visualization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        25
      9.1.3 2D Projections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        26
  9.2 Multiple Vector Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        26
      9.2.1 Distance Range Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            26
      9.2.2 Angle Range Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           26
  9.3 Circle Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27
      9.3.1 Orthogonal Vector Circle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          27
      9.3.2 Traditional XY Circle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         28
      9.3.3 Improved Orthogonal Vector Circle . . . . . . . . . . . . . . . . . . . . . . . . . . .           30
  9.4 Parameter Effects in Scalar Formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . .         32
      9.4.1 Distance Parameter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          32
      9.4.2 Angle Parameter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         32
  9.5 Effect of Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    32
      9.5.1 3D Visualizations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       33
      9.5.2 Combined 3D and Origin Plane Views . . . . . . . . . . . . . . . . . . . . . . . . .              33
  9.6 Summary of Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        34

10 Conclusion                                                                                                 34
   10.1 Summary of Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     34
   10.2 Potential Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    35
   10.3 Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     35
   10.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    35

A Source Code                                                                                                 36
  A.1 Example Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       36
      A.1.1 example circle.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       36
      A.1.2 example circle xy.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        37
      A.1.3 example orthogonal circle.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          39
  A.2 main.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     40
  A.3 vector utils.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   42
  A.4 config.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   43
  A.5 visualization.py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    45
  A.6 init .py . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      46




                                                       3
Orthogonal Vectors Generator                                                Generalized Implementation


1     Introduction
In three-dimensional space, orthogonal vectors are perpendicular to each other, meaning their dot product
equals zero. This document describes a flexible Python tool for generating and visualizing complex
orthogonal vector configurations with advanced plotting capabilities.

1.1    Project Overview
The Orthogonal Vector Visualization System is a Python tool that generates a single R vector using
scalar formulas and provides comprehensive visualization options for both single and multiple vectors.
It supports various projection methods, parameter ranges, and visualization styles.

1.2    Key Features
The implementation offers the following key features:

    • Single R Vector Generation: Generates a single R vector using scalar formulas.
    • Multiple Vector Generation: Supports generating multiple vectors with parameter ranges for
      distance and angle.
    • Comprehensive Visualization: Supports 3D visualization, 2D projections, and endpoints-only
      plotting.
    • Configurable Parameters: All aspects of vector generation and visualization can be configured
      through command-line arguments or configuration files.
    • Command-line Interface: A comprehensive command-line interface with extensive options.
    • Configuration File Support: Configurations can be saved to and loaded from JSON files.
    • Circle/Sphere Pattern Generation: Includes examples for generating circle and sphere-like
      patterns.

1.3    Package Structure
The package is organized into the following modules:

    • vector utils.py: Vector generation and component calculation functions.
    • visualization.py: Comprehensive visualization functions for 2D and 3D plotting.
    • config.py: Configuration management and serialization.
    • main.py: Command-line interface and main program logic.
    • example circle.py: Example generating a sphere-like pattern using orthogonal vectors.
    • example circle xy.py: Example generating a traditional circle in the XY plane.
    • example orthogonal circle.py: Example with improved visualization of orthogonal vectors.
    • CIRCLE EXAMPLES.md: Documentation for the circle examples.

1.4    Document Structure
This document is organized as follows:

    • Mathematical Formulation: Explains the mathematical basis for generating orthogonal vectors
      using scalar formulas.
    • Implementation: Describes the implementation details of the vector generation and visualization
      system.
    • API Reference: Provides a reference for the system’s functions and classes.


                                                   4
Orthogonal Vectors Generator                                                      Generalized Implementation


    • Usage Examples: Shows examples of how to use the system, including circle pattern generation.
    • Visualization: Explains the visualization techniques used, including endpoints-only plotting.
    • Configuration: Describes the configuration management system and command-line options.

    • Command-line Interface: Documents the extensive command-line interface options.
    • Example Results: Shows example results for different configurations, including circle patterns.
    • Conclusion: Summarizes the document and discusses potential future work.

    • Appendix: Contains additional information, including complete code listings.


2       Mathematical Formulation
This section describes the mathematical basis for generating a single R vector using scalar formulas from
a given origin point.

2.1     Scalar Formulation
Let R⃗ 0 be the origin vector in three-dimensional space. The R vector is calculated using the following
scalar formula:

                                     r                √                               √
             ⃗ =R
                ⃗ 0 + d · cos(θ) ·       2     cos(θ)/ 3 + sin(θ)     sin(θ) − cos(θ)/ 3    ⃗0
             R                             +d·        √           +d·         √          −2·R            (1)
                                         3              2                       2
    where:
    • d is a distance parameter that scales the vector
    • θ is an angle parameter that rotates the vector
   This formula combines three orthogonal components to produce a single resulting vector. The formula
can be simplified to:


                         ⃗ =R
                         R  ⃗ 0 + ⃗v1 + ⃗v2 + ⃗v3 − 2 · R
                                                        ⃗0 = R
                                                             ⃗ 0 + ⃗v − 2 · R
                                                                            ⃗ 0 = ⃗v − R
                                                                                       ⃗0                (2)

    where ⃗v is the combined displacement vector from the origin.

2.2     Mathematical Properties
The scalar formulation has several important mathematical properties:

2.2.1    Orthogonality
The formula is derived from three orthogonal components, which ensures that the resulting vector main-
tains important geometric properties. The orthogonality of these components is preserved regardless of
                       ⃗ 0.
the values of d, θ, or R

2.2.2    Invariance to Origin
                                                                                      ⃗ 0 . The formula
The behavior of the vector generation is predictable with respect to the origin point R
automatically adjusts for the origin position.

2.2.3    Invariance to Rotation
The parameter θ allows for rotation of the generated vector around the origin. This rotation parameter
provides flexibility in generating different vector orientations.




                                                        5
Orthogonal Vectors Generator                                               Generalized Implementation


2.2.4    Scaling
The parameter d scales the vector magnitude, allowing for adjusting the size of the vector without
changing its direction properties.

2.3     Geometric Interpretation
Geometrically, the scalar formula generates vectors that follow specific patterns in three-dimensional
space. The parameter d controls the scale, while θ controls the orientation.

2.4     Circle and Sphere Generation
One interesting application of this vector generation formula is the creation of circle and sphere-like
patterns. By keeping d constant and varying θ from 0 to 2π, the resulting endpoints of the R ⃗ vectors
form a pattern that lies on a sphere centered at the origin.
   This behavior can be observed in the example scripts provided with the system:

    • example circle.py - Demonstrates the sphere-like pattern generated by varying θ

    • example circle xy.py - Creates a traditional circle in the XY plane for comparison
    • example orthogonal circle.py - Provides improved visualization of the orthogonal vector sphere

    The mathematical reason for this behavior is that the orthogonal vector formulas maintain a constant
distance from the origin when θ is varied. This is different from a traditional circle in a plane, which
only maintains a constant distance from the origin in that specific plane.


3       Implementation
The Orthogonal Vector Visualization System is designed to be flexible, configurable, and easy to use.
This section describes the implementation details of the system.

3.1     Modular Architecture
The system is organized into the following modules:

    • vector utils.py: Vector generation and component calculation functions.
    • visualization.py: Comprehensive visualization functions for 2D and 3D plotting.
    • config.py: Configuration management and serialization.

    • main.py: Command-line interface and main program logic.
    • example circle.py: Example generating a sphere-like pattern using orthogonal vectors.
    • example circle xy.py: Example generating a traditional circle in the XY plane.
    • example orthogonal circle.py: Example with improved visualization of orthogonal vectors.

    This modular architecture allows for easy maintenance, extension, and reuse of the code.

3.2     Vector Generation
The vector utils.py module provides functions for vector generation and component calculation, in-
cluding:

    • create orthogonal vectors: Generates a single R vector using scalar formulas from a given origin
      point, distance, and angle.
    • check orthogonality: Checks if the component vectors are orthogonal.

    • calculate displacement vectors: Calculates the displacement vectors from the origin.


                                                   6
Orthogonal Vectors Generator                                                   Generalized Implementation


   • calculate dot products: Calculates the dot products between vectors.
   The create orthogonal vectors function implements the scalar formulas described in the mathe-
matical formulation section. It takes the origin vector R 0, distance parameter d, and angle parameter
theta as inputs and returns the resulting R vector along with its components.

3.3    Visualization
The visualization.py module provides comprehensive functions for visualizing vectors, including:
   • plot vectors 3d: Plots vectors in 3D space.
   • plot vectors 2d projection: Plots 2D projections (xy, xz, yz, r0 planes).
   • plot all projections: Plots all projections of a single vector.
   • plot multiple vectors 3d: Plots multiple vectors in 3D with optional endpoints-only mode.
   • plot multiple vectors 2d: Plots 2D projections of multiple vectors.
   • plot multiple vectors: Plots multiple vectors in all projections.
    The visualization functions use Matplotlib to create the plots. The 3D visualization shows the vectors
in three-dimensional space, while the 2D visualizations show projections onto the XY, XZ, and YZ planes.
The endpoints-only option allows for clearer visualization of point patterns by only plotting the endpoints
of vectors rather than the full arrows.

3.4    Configuration Management
The config.py module implements a configuration management system with the VectorConfig class.
This class provides a unified way to configure all aspects of vector generation and visualization, including:
   • Origin vector (R 0)
   • Distance parameter (d)
   • Angle parameter (theta)
   • Distance and angle ranges for multiple vector generation
   • Endpoints-only plotting option
   • Plot title and labels
   • Plot saving options
   The VectorConfig class also provides methods for saving configurations to and loading configurations
from JSON files, making it easy to reuse configurations across different runs.

3.5    Command-line Interface
The main.py module provides a comprehensive command-line interface for the system. This interface
allows users to generate and visualize orthogonal vectors with extensive options, including:
   • Setting the origin vector with -R or –origin
   • Setting the distance parameter with -d or –distance
   • Setting the angle parameter with -a or –angle
   • Generating multiple vectors with –d-range and –theta-range
   • Enabling endpoints-only plotting with –endpoints
   • Controlling visualization options with –no-r0-plane, –no-legend, and –no-grid
   • Saving plots with –save-plots and –output-dir
   • Managing configurations with –config and –save-config


                                                     7
     Orthogonal Vectors Generator                                                                        Generalized Implementation


     3.6      Circle Examples
     The system includes three example scripts demonstrating different approaches to generating and visual-
     izing circle and sphere-like patterns:

         • example circle.py: Generates points using orthogonal vector formulas, creating a sphere-like
           pattern.
         • example circle xy.py: Creates a traditional circle in the XY plane.
         • example orthogonal circle.py: Similar to the first example but with improved visualization.

        These examples generate 73 points (from 0° to 360° in 5° increments) and plot only the endpoints of
     the vectors, providing a clear visualization of the patterns formed.

     3.7      Dependencies
     The system depends on the following Python libraries:

         • numpy: For numerical computations
         • matplotlib: For visualization
         • json: For configuration file handling
         • argparse: For command-line interface

        These dependencies are specified in the requirements.txt file, making it easy to install them using
     pip and a virtual environment.


     4       API Reference
     This section provides a reference for the API of the Generalized Orthogonal Vectors Generator and
     Visualizer package. It describes the functions and classes provided by each module.

     4.1      vector utils Module
     4.1.1     create orthogonal vectors

 1   def c r e a t e _ o r t h o g o n a l _ v e c t o r s ( origin , d =1.0 , theta = math . pi /4) :
 2       """
 3       Create three orthogonal vectors from a given origin point .
 4
 5         Args :
 6              origin ( list or numpy . ndarray ) : The origin point as a 3 D vector [x , y , z ]
 7              d ( float , optional ) : Distance parameter . Defaults to 1.0.
 8              theta ( float , optional ) : Angle parameter in radians . Defaults to pi /4.
 9
10         Returns :
11             tuple : Three orthogonal vectors ( R1 , R2 , R3 ) as numpy arrays
12         """

        This function creates three orthogonal vectors from a given origin point using the mathematical
     formulation described in the Mathematical Formulation section. It takes the origin point, distance
     parameter, and angle parameter as inputs and returns the three orthogonal vectors.

     4.1.2     check orthogonality

 1   def c h e c k _ o r t h o g o n a l i t y ( vectors , origin = None , tolerance =1 e -10) :
 2       """
 3       Check if a set of vectors is orthogonal .
 4
 5         Args :
 6              vectors ( list ) : List of vectors to check
 7              origin ( list or numpy . ndarray , optional ) : Origin point . If provided ,
 8                                                             checks orthogonality of


                                                                         8
     Orthogonal Vectors Generator                                                             Generalized Implementation


 9                                                            displacement vectors .
10               tolerance ( float , optional ) : Tolerance for floating - point comparison .
11                                               Defaults to 1e -10.
12
13         Returns :
14             bool : True if vectors are orthogonal , False otherwise
15         """

         This function checks if a set of vectors is orthogonal by calculating the dot products between them.
     If an origin point is provided, it checks the orthogonality of the displacement vectors from the origin. It
     returns True if the vectors are orthogonal (within the specified tolerance) and False otherwise.

     4.1.3     calculate displacement vectors

 1   def c a l c u l a t e _ d i s p l a c e m e n t _ v e c t o r s ( vectors , origin ) :
 2       """
 3       Calculate the displacement vectors from the origin .
 4
 5         Args :
 6              vectors ( list ) : List of vectors
 7              origin ( list or numpy . ndarray ) : Origin point
 8
 9         Returns :
10             list : List of displacement vectors
11         """

        This function calculates the displacement vectors from the origin to each of the given vectors. It
     takes a list of vectors and an origin point as inputs and returns a list of displacement vectors.

     4.1.4     calculate dot products

 1   def c a l c u l a t e _ d o t _ p r o d u c t s ( vectors ) :
 2       """
 3       Calculate the dot products between all pairs of vectors .
 4
 5         Args :
 6              vectors ( list ) : List of vectors
 7
 8         Returns :
 9             list : List of dot products
10         """

         This function calculates the dot products between all pairs of vectors in the given list. It takes a list
     of vectors as input and returns a list of dot products.

     4.2      visualization Module
     4.2.1     plot vectors 3d

 1   def p lo t_ v ec to rs _ 3d ( vectors , origin = None , title = " Orthogonal Vectors (3 D ) " ,
 2                               show_plot = True , save_path = None ) :
 3       """
 4       Plot vectors in 3 D space .
 5
 6         Args :
 7              vectors ( list ) : List of vectors to plot
 8              origin ( list or numpy . ndarray , optional ) : Origin point .
 9                                                             Defaults to [0 , 0 , 0].
10              title ( str , optional ) : Plot title . Defaults to " Orthogonal Vectors (3 D ) ".
11              show_plot ( bool , optional ) : Whether to show the plot . Defaults to True .
12              save_path ( str , optional ) : Path to save the plot . Defaults to None .
13
14         Returns :
15             matplotlib . figure . Figure : The figure object
16         """

        This function plots vectors in 3D space using Matplotlib. It takes a list of vectors, an optional origin
     point, a title, and options for showing and saving the plot as inputs. It returns the Matplotlib figure
     object.


                                                                         9
     Orthogonal Vectors Generator                                                       Generalized Implementation


     4.2.2    plot vectors 2d

 1   def p lo t_ v ec to rs _ 2d ( vectors , origin = None ,
 2                               title = " Orthogonal Vectors (2 D Projections ) " ,
 3                               show_plot = True , save_path = None ) :
 4       """
 5       Plot vectors in various 2 D projections .
 6
 7         Args :
 8              vectors ( list ) : List of vectors to plot
 9              origin ( list or numpy . ndarray , optional ) : Origin point .
10                                                             Defaults to [0 , 0 , 0].
11              title ( str , optional ) : Plot title .
12                                        Defaults to " Orthogonal Vectors (2 D Projections ) ".
13              show_plot ( bool , optional ) : Whether to show the plot . Defaults to True .
14              save_path ( str , optional ) : Path to save the plot . Defaults to None .
15
16         Returns :
17             matplotlib . figure . Figure : The figure object
18         """

        This function plots vectors in various 2D projections using Matplotlib. It creates four subplots
     showing projections onto the XY, XZ, and YZ planes, as well as a projection onto the plane containing
     the origin point. It takes a list of vectors, an optional origin point, a title, and options for showing and
     saving the plot as inputs. It returns the Matplotlib figure object.

     4.2.3    plot vectors

 1   def plot_vectors ( vectors , origin = None , plot_type = " 3 d " , title = None ,
 2                    show_plot = True , save_path = None ) :
 3       """
 4       Plot vectors in either 3 D or 2D , depending on the plot_type .
 5
 6         Args :
 7              vectors ( list ) : List of vectors to plot
 8              origin ( list or numpy . ndarray , optional ) : Origin point .
 9                                                             Defaults to [0 , 0 , 0].
10              plot_type ( str , optional ) : Type of plot , either "3 d " or "2 d ".
11                                            Defaults to "3 d ".
12              title ( str , optional ) : Plot title . Defaults to None .
13              show_plot ( bool , optional ) : Whether to show the plot . Defaults to True .
14              save_path ( str , optional ) : Path to save the plot . Defaults to None .
15
16         Returns :
17             matplotlib . figure . Figure : The figure object
18         """

        This function is a high-level function that plots vectors in either 3D or 2D, depending on the specified
     plot type. It calls either plot vectors 3d or plot vectors 2d based on the plot type parameter. It
     takes a list of vectors, an optional origin point, a plot type, a title, and options for showing and saving
     the plot as inputs. It returns the Matplotlib figure object.

     4.3     config Module
     4.3.1    VectorConfig Class

 1   class VectorConfig :
 2       """
 3       Configuration class for vector generation and visualization .
 4       """
 5
 6         def __init__ ( self , origin = None , d =1.0 , theta = math . pi /4 , plot_type = " 3 d " ,
 7                      title = None , show_plot = True , save_path = None ) :
 8             """
 9             Initialize the configuration .
10
11              Args :
12                   origin ( list or numpy . ndarray , optional ) : Origin point .
13                                                                  Defaults to [0 , 0 , 0].
14                   d ( float , optional ) : Distance parameter . Defaults to 1.0.


                                                             10
     Orthogonal Vectors Generator                                                     Generalized Implementation


15                    theta ( float , optional ) : Angle parameter in radians .
16                                                Defaults to pi /4.
17                    plot_type ( str , optional ) : Type of plot , either "3 d " or "2 d ".
18                                                  Defaults to "3 d ".
19                    title ( str , optional ) : Plot title . Defaults to None .
20                    show_plot ( bool , optional ) : Whether to show the plot .
21                                                   Defaults to True .
22                    save_path ( str , optional ) : Path to save the plot . Defaults to None .
23             """

         This class provides a unified way to configure all aspects of vector generation and visualization.
     It stores the configuration parameters and provides methods for saving configurations to and loading
     configurations from JSON files.

     4.3.2   VectorConfig.save to file

 1   def save_to_file ( self , file_path ) :
 2       """
 3       Save the configuration to a JSON file .
 4
 5         Args :
 6              file_path ( str ) : Path to save the configuration file
 7
 8         Returns :
 9             bool : True if successful , False otherwise
10         """

        This method saves the configuration to a JSON file. It takes a file path as input and returns True if
     the save was successful and False otherwise.

     4.3.3   VectorConfig.load from file

 1   @classmethod
 2   def load_fr om_file ( cls , file_path ) :
 3       """
 4       Load the configuration from a JSON file .
 5
 6         Args :
 7              file_path ( str ) : Path to the configuration file
 8
 9         Returns :
10             VectorConfig : The loaded configuration
11         """

        This class method loads a configuration from a JSON file. It takes a file path as input and returns a
     new VectorConfig object with the loaded configuration.

     4.4     main Module
     4.4.1   main Function

 1   def main () :
 2       """
 3       Main function for the command - line interface .
 4       """

        This function is the entry point for the command-line interface. It parses command-line arguments,
     creates a configuration, generates orthogonal vectors, and visualizes them.

     4.5       init     Module
     The init .py module exports the key functions and classes from the package, making them available
     when the package is imported:
 1   from . vector_utils import create_orthogonal_vectors , c h e c k _ o r t h o g o n a l i t y
 2   from . visualization import plot_vectors , plot_vectors_3d , pl ot _v e ct or s_ 2 d
 3   from . config import VectorConfig
 4
 5   __all__ = [


                                                           11
     Orthogonal Vectors Generator                                                                     Generalized Implementation


 6         ’ create_orthogonal_vectors ’,
 7         ’ check_orthogonality ’,
 8         ’ plot_vectors ’ ,
 9         ’ p lo t_ ve c to rs _3 d ’ ,
10         ’ p lo t_ ve c to rs _2 d ’ ,
11         ’ VectorConfig ’
12   ]



     5     Usage Examples
     This section provides examples of how to use the Generalized Orthogonal Vectors Generator and Visu-
     alizer package. It includes examples of using the package as a Python module and as a command-line
     tool.

     5.1     Basic Usage as a Python Module
     The following example shows how to use the package as a Python module to generate and visualize
     orthogonal vectors with default parameters:
 1   import numpy as np
 2   from generalized import create_orthogonal_vectors , plot_vectors
 3
 4 # Generate orthogonal vectors with default parameters
 5 # ( origin at [0 , 0 , 0] , d =1.0 , theta = pi /4)
 6 vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( origin =[0 , 0 , 0])
 7
 8   # Plot the vectors in 3 D
 9   plot_vectors ( vectors , origin =[0 , 0 , 0])



     5.2     Customizing Vector Generation
     The following example shows how to customize the vector generation by specifying the origin, distance
     parameter, and angle parameter:
 1   import numpy as np
 2   import math
 3   from generalized import create_orthogonal_vectors , plot_vectors
 4
 5 # Generate orthogonal vectors with custom parameters
 6 origin = [1 , 1 , 1]
 7 d = 2.0
 8 theta = math . pi / 3
 9
10   vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( origin = origin , d =d , theta = theta )
11
12   # Plot the vectors in 3 D
13   plot_vectors ( vectors , origin = origin , title = f " Orthogonal Vectors ( Origin ={ origin } , d ={ d } ,
          theta ={ theta }) " )



     5.3     Using the VectorConfig Class
     The following example shows how to use the VectorConfig class to configure vector generation and
     visualization:
 1   import numpy as np
 2   import math
 3   from generalized import create_orthogonal_vectors , plot_vectors , VectorConfig
 4
 5 # Create a configuration
 6 config = VectorConfig (
 7     origin =[0 , 0 , 2] ,
 8     d =1.5 ,
 9     theta = math . pi / 6 ,
10     plot_type = " 2 d " ,
11     title = " Custom Configuration " ,
12     save_path = " custom_config . png "
13 )




                                                                      12
     Orthogonal Vectors Generator                                                             Generalized Implementation


14
15 # Generate orthogonal vectors using the configuration
16 vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s (
17     origin = config . origin ,
18     d = config .d ,
19     theta = config . theta
20 )
21
22 # Plot the vectors using the configuration
23 plot_vectors (
24     vectors ,
25     origin = config . origin ,
26     plot_type = config . plot_type ,
27     title = config . title ,
28     show_plot = config . show_plot ,
29     save_path = config . save_path
30 )




     5.4      Saving and Loading Configurations
     The following example shows how to save a configuration to a file and load it later:
 1   import numpy as np
 2   import math
 3   from generalized import VectorConfig , create_orthogonal_vectors , plot_vectors
 4
 5 # Create a configuration
 6 config = VectorConfig (
 7     origin =[0 , 0 , 2] ,
 8     d =1.5 ,
 9     theta = math . pi / 6 ,
10     plot_type = " 2 d " ,
11     title = " Custom Configuration "
12 )
13
14   # Save the configuration to a file
15   config . save_to_file ( " config . json " )
16
17   # Later , load the configuration from the file
18   loaded_config = VectorConfig . l oad_from _file ( " config . json " )
19
20 # Generate orthogonal vectors using the loaded configuration
21 vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s (
22     origin = loaded_config . origin ,
23     d = loaded_config .d ,
24     theta = loaded_config . theta
25 )
26
27 # Plot the vectors using the loaded configuration
28 plot_vectors (
29     vectors ,
30     origin = loaded_config . origin ,
31     plot_type = loaded_config . plot_type ,
32     title = loaded_config . title ,
33     show_plot = loaded_config . show_plot ,
34     save_path = loaded_config . save_path
35 )




     5.5      Checking Orthogonality
     The following example shows how to check if a set of vectors is orthogonal:
 1   import numpy as np
 2   from generalized import create_orthogonal_vectors , c h e c k _ o r t h o g o n a l i t y
 3
 4   # Generate orthogonal vectors
 5   vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( origin =[0 , 0 , 0])
 6
 7   # Check if the vectors are orthogonal
 8   is_orthogonal = c h e c k _ o r t h o g o n a l i t y ( vectors , origin =[0 , 0 , 0])
 9
10   print ( f " Vectors are orthogonal : { is_orthogonal } " )


                                                                        13
     Orthogonal Vectors Generator                                              Generalized Implementation


     5.6     Using the Command-line Interface
     The following examples show how to use the command-line interface to generate and visualize orthogonal
     vectors:

     5.6.1   Basic Usage

 1   python -m generalized . main

         This command generates and visualizes orthogonal vectors with default parameters (origin at [0, 0,
     0], d=1.0, theta=pi/4).

     5.6.2   Customizing Vector Generation

 1   python -m generalized . main -- origin 1 1 1 --d 2.0 -- theta 1.047

         This command generates and visualizes orthogonal vectors with custom parameters (origin at [1, 1,
     1], d=2.0, theta=pi/3).

     5.6.3   Customizing Visualization

 1   python -m generalized . main -- plot - type 2 d -- title " Custom Visualization " -- save - path
         custom . png

         This command generates orthogonal vectors with default parameters and visualizes them with custom
     visualization options (2D plot, custom title, save to file).

     5.6.4   Using a Configuration File

 1   python -m generalized . main -- config config . json

        This command loads a configuration from a file and uses it to generate and visualize orthogonal
     vectors.

     5.6.5   Saving a Configuration File

 1   python -m generalized . main -- origin 1 1 1 --d 2.0 -- theta 1.047 -- save - config config .
         json

        This command generates and visualizes orthogonal vectors with custom parameters and saves the
     configuration to a file.

     5.7     Complete Example Script
     The following is a complete example script that demonstrates various features of the package:
 1   import numpy as np
 2   import math
 3   import matplotlib . pyplot as plt
 4   from generalized import create_orthogonal_vectors , check_orthogonality , plot_vectors ,
         VectorConfig
 5
 6   def main () :
 7       # Create configur ations for different examples
 8       configs = [
 9            VectorConfig (
10                 origin =[0 , 0 , 0] ,
11                 d =1.0 ,
12                 theta = math . pi / 4 ,
13                 plot_type = " 3 d " ,
14                 title = " Default Configuration " ,
15                 save_path = " default . png "
16            ),
17            VectorConfig (
18                 origin =[1 , 1 , 1] ,
19                 d =2.0 ,
20                 theta = math . pi / 3 ,


                                                       14
     Orthogonal Vectors Generator                                                             Generalized Implementation


21                    plot_type = " 3 d " ,
22                    title = " Alternative Configuration " ,
23                    save_path = " alternative . png "
24              )
25         ]
26
27         # Process each configuration
28         for i , config in enumerate ( configs ) :
29             print ( f " Processing configuration { i +1}/{ len ( configs ) } " )
30
31              # Generate orthogonal vectors
32              vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s (
33                  origin = config . origin ,
34                  d = config .d ,
35                  theta = config . theta
36              )
37
38              # Check orthogonality
39              is_orthogonal = c h e c k _ o r t h o g o n a l i t y ( vectors , origin = config . origin )
40              print ( f " Vectors are orthogonal : { is_orthogonal } " )
41
42              # Plot vectors
43              plot_vectors (
44                  vectors ,
45                  origin = config . origin ,
46                  plot_type = config . plot_type ,
47                  title = config . title ,
48                  show_plot = False ,
49                  save_path = config . save_path
50              )
51              print ( f " Plot saved to { config . save_path } " )
52
53              # Save configuration
54              config_file = f " config { i +1}. json "
55              config . save_to_file ( config_file )
56              print ( f " Configuration saved to { config_file } " )
57
58         # Show all plots
59         plt . show ()
60
61   if __name__ == " __main__ " :
62       main ()

        This script creates three different configurations, generates orthogonal vectors for each, checks their
     orthogonality, plots them, and saves both the plots and configurations to files. Finally, it displays all the
     plots.


     6     Visualization
     The Orthogonal Vector Visualization System provides comprehensive visualization options for the gen-
     erated vectors. This section describes the visualization techniques used by the system.

     6.1       3D Visualization
     The 3D visualization shows the vectors in three-dimensional space. It uses Matplotlib’s 3D plotting
     capabilities to create a 3D plot with the following features:

         • The origin point is shown as a black dot.
         • The vectors can be shown as arrows from the origin point or just as endpoints.
         • Each vector is assigned a different color for easy identification, using a colormap for multiple vectors.
         • The plot includes a legend identifying each vector.

         • The plot includes labels for the X, Y, and Z axes.
         • The plot includes a title, which can be customized.



                                                                            15
Orthogonal Vectors Generator                                                   Generalized Implementation


   The 3D visualization provides a complete view of the vectors in three-dimensional space, allowing for
a better understanding of their spatial relationships.




                      Figure 1: Example of 3D visualization of orthogonal vectors

6.2    2D Projections
The 2D visualization shows projections of the vectors onto various planes. It creates four subplots
showing the following projections:

   • XY Plane: Shows the projection of the vectors onto the XY plane (Z=0).

   • XZ Plane: Shows the projection of the vectors onto the XZ plane (Y=0).
   • YZ Plane: Shows the projection of the vectors onto the YZ plane (X=0).
   • Origin Plane: Shows the projection of the vectors onto the plane perpendicular to the vector from
     the global origin to the specified origin point.

   Each subplot includes the following features:

   • The origin point is shown as a black dot.
   • The vectors can be shown as arrows from the origin point or just as endpoints.
   • Each vector is assigned a different color for easy identification, using a colormap for multiple vectors.

   • The subplot includes a legend identifying each vector.
   • The subplot includes labels for the axes.
   • The subplot includes a title indicating the plane of projection.




                                                     16
Orthogonal Vectors Generator                                                 Generalized Implementation


    The 2D projections provide different perspectives on the vectors, allowing for a better understanding
of their projections onto different planes.




                       Figure 2: Example of 2D projections of orthogonal vectors

6.3    Endpoints-only Plotting
The system provides an endpoints-only plotting option that only shows the endpoints of vectors, not the
arrows. This is particularly useful for visualizing patterns formed by multiple vectors, such as circle or
sphere-like patterns.

   • In 3D visualization, the endpoints are shown as colored dots.

   • In 2D projections, the endpoints are shown as colored dots in each projection plane.
   • The endpoints-only option can be enabled using the –endpoints command-line option.

    This option provides a clearer visualization of point patterns by removing the arrows, which can
clutter the plot when there are many vectors.




                                                   17
Orthogonal Vectors Generator                                                 Generalized Implementation




              Figure 3: Example of endpoints-only visualization (orthogonal vector circle)


6.4    Multiple Vector Visualization
The system supports visualizing multiple vectors in a single plot, with the following features:

   • Multiple vectors can be generated by specifying ranges for the distance and angle parameters.
   • Each vector is assigned a color from a colormap for easy identification.

   • The plot includes a legend identifying each vector by its parameters.
   • The endpoints-only option can be used to visualize the pattern formed by the endpoints of multiple
     vectors.

   This capability is particularly useful for exploring the effects of varying parameters on the resulting
vectors and for generating complex patterns such as circles and spheres.

6.5    Circle Examples Visualization
The system includes example scripts demonstrating different approaches to generating and visualizing
circle and sphere-like patterns:

   • example circle.py: Generates points using orthogonal vector formulas, creating a sphere-like
     pattern.
   • example circle xy.py: Creates a traditional circle in the XY plane.

   • example orthogonal circle.py: Similar to the first example but with improved visualization.

   These examples generate points at regular angular intervals and plot only the endpoints of the vectors,
providing a clear visualization of the resulting patterns.




                                                   18
Orthogonal Vectors Generator                                                Generalized Implementation




Figure 4: XY projection of orthogonal vector circle        Figure 5: Traditional circle in XY plane




                           Figure 6: 3D visualization of traditional XY circle

6.6    Implementation Details
The visualization functions use Matplotlib to create the plots. The 3D visualization uses Matplotlib’s
Axes3D class, while the 2D visualizations use regular Matplotlib axes.
   The vectors are plotted using Matplotlib’s quiver function, which creates arrows from a starting
point to an ending point. The origin point is plotted using Matplotlib’s scatter function.



                                                      19
    Orthogonal Vectors Generator                                                  Generalized Implementation


        The colors of the vectors are assigned using Matplotlib’s default color cycle, ensuring that each vector
    has a different color.
        The legends are created using Matplotlib’s legend function, with labels for each vector.
        The plots are saved using Matplotlib’s savefig function, which supports various file formats, includ-
    ing PNG, JPEG, and PDF.

    6.7    Visualization in the Command-line Interface
    The command-line interface provides options for controlling the visualization, including:

        • --plot-type: Specifies the type of plot, either ”3d” or ”2d”.
        • --title: Specifies the title of the plot.
        • --no-show: Prevents the plot from being displayed interactively.
        • --save-path: Specifies the path to save the plot.

        These options allow users to customize the visualization without modifying the code.


    7     Configuration
    The Generalized Orthogonal Vectors Generator and Visualizer package provides a flexible configuration
    system that allows users to customize all aspects of vector generation and visualization. This section
    describes the configuration system and its features.

    7.1    VectorConfig Class
    The configuration system is implemented through the VectorConfig class, which provides a unified way
    to configure all aspects of vector generation and visualization. The class has the following attributes:

        • origin: The origin point for vector generation (default: [0, 0, 0]).
        • d: The distance parameter for vector generation (default: 1.0).
        • theta: The angle parameter for vector generation (default: π/4).
        • plot type: The type of plot, either ”3d” or ”2d” (default: ”3d”).
        • title: The title of the plot (default: None, which uses a default title based on the plot type).
        • show plot: Whether to show the plot interactively (default: True).
        • save path: The path to save the plot (default: None, which doesn’t save the plot).

        The class provides methods for initializing the configuration, saving it to a file, and loading it from
    a file.

    7.2    Initializing a Configuration
    A configuration can be initialized with default values or with custom values:
1   # Initialize with default values
2   config = VectorConfig ()
3
4  # Initialize with custom values
5  config = VectorConfig (
 6     origin =[1 , 1 , 1] ,
 7     d =2.0 ,
 8     theta = math . pi / 3 ,
 9     plot_type = " 2 d " ,
10     title = " Vector Configuration " ,
11     show_plot = False ,
12     save_path = " custom . png "
13 )




                                                        20
    Orthogonal Vectors Generator                                                  Generalized Implementation


    7.3     Using a Configuration
    A configuration can be used to generate and visualize orthogonal vectors:
1 # Generate orthogonal vectors using the configuration
2 vectors = c r e a t e _ o r t h o g o n a l _ v e c t o r s (
3     origin = config . origin ,
4     d = config .d ,
5     theta = config . theta
6 )
7
8  # Plot the vectors using the configuration
9  plot_vectors (
10     vectors ,
11     origin = config . origin ,
12     plot_type = config . plot_type ,
13     title = config . title ,
14     show_plot = config . show_plot ,
15     save_path = config . save_path
16 )




    7.4     Saving a Configuration to a File
    A configuration can be saved to a JSON file for later use:
1   # Save the configuration to a file
2   config . save_to_file ( " config . json " )

        The saved file will contain all the configuration parameters in JSON format:
1   {
2         " origin " : [1 , 1 , 1] ,
3         " d " : 2.0 ,
4         " theta " : 1.0471975511965976 ,
5         " plot_type " : " 2 d " ,
6         " title " : " Custom Configuration " ,
7         " show_plot " : false ,
8         " save_path " : " custom . png "
9   }



    7.5     Loading a Configuration from a File
    A configuration can be loaded from a JSON file:
1   # Load the configuration from a file
2   config = VectorConfig . l oad_from _file ( " config . json " )

        This creates a new VectorConfig object with the parameters specified in the file.

    7.6     Configuration in the Command-line Interface
    The command-line interface provides options for configuring vector generation and visualization:
        • --origin: Specifies the origin point as three space-separated values.
        • --d: Specifies the distance parameter.
        • --theta: Specifies the angle parameter in radians.
        • --plot-type: Specifies the type of plot, either ”3d” or ”2d”.
        • --title: Specifies the title of the plot.
        • --no-show: Prevents the plot from being displayed interactively.
        • --save-path: Specifies the path to save the plot.
        • --config: Specifies a configuration file to load.
        • --save-config: Specifies a file to save the configuration to.
        These options allow users to customize the configuration without modifying the code.


                                                        21
    Orthogonal Vectors Generator                                                 Generalized Implementation


    7.7     Configuration File Format
    The configuration file is a JSON file with the following structure:
1   {
2         " origin " : [x , y , z ] ,
3         " d " : float ,
4         " theta " : float ,
5         " plot_type " : " 3 d " or " 2 d " ,
6         " title " : string or null ,
7         " show_plot " : boolean ,
8         " save_path " : string or null
9   }

        All fields are optional and will use default values if not specified.

    7.8     Default Configuration
    The default configuration is as follows:

        • origin: [0, 0, 0]
        • d: 1.0
        • theta: π/4 (approximately 0.7853981633974483)

        • plot type: ”3d”
        • title: None (uses a default title based on the plot type)
        • show plot: True
        • save path: None (doesn’t save the plot)

        This configuration generates three orthogonal vectors from the origin [0, 0, 0] with a distance param-
    eter of 1.0 and an angle parameter of π/4, and visualizes them in 3D.


    8     Command-line Interface
    The Orthogonal Vector Visualization System provides a comprehensive command-line interface that
    allows users to generate and visualize orthogonal vectors with extensive options. This section describes
    the command-line interface and its features.

    8.1     Basic Usage
    The command-line interface can be accessed by running the main.py module:
1   python generalized / main . py

      This command generates and visualizes a single vector with default parameters (origin at [0, 0, 0],
    d=1.0, theta=pi/4).

    8.2     Command-line Options
    The command-line interface provides extensive options for configuring vector generation and visualiza-
    tion:

        • -R X Y Z, --origin X Y Z: Sets the origin vector R 0 coordinates. Default: 0 0 0.
        • -d VALUE, --distance VALUE: Sets the distance parameter. Default: 1.0.

        • --d-range START STEPS END: Generates multiple vectors with distance values from START to
          END with STEPS steps.
        • -a VALUE, --angle VALUE: Sets the angle parameter in radians. Default: 0.7853981633974483
          (pi/4).


                                                          22
    Orthogonal Vectors Generator                                              Generalized Implementation


       • --theta-range START STEPS END: Generates multiple vectors with angle values from START to
         END with STEPS steps.
       • --endpoints true/false: Only plots the endpoints of vectors, not the arrows. Default: false.

       • --no-r0-plane: Does not show the R 0 plane projection.
       • --no-legend: Does not show the legend.
       • --no-grid: Does not show the grid.
       • --save-plots: Saves plots to files instead of displaying them.

       • --output-dir DIR: Directory to save plots to. Default: ’plots’.
       • --config FILE: Loads configuration from a JSON file.
       • --save-config FILE: Saves current configuration to a JSON file.

    8.3     Examples
    8.3.1   Generating a Single Vector

1   python generalized / main . py -R 1 1 1 -d 2.0 -a 1.047

      This command generates and visualizes a single vector with custom parameters (origin at [1, 1, 1],
    d=2.0, theta=pi/3).

    8.3.2   Generating Multiple Vectors with Distance Range

1   python generalized / main . py -R 0 0 0 --d - range 1 5 3 -a 0.7854

        This command generates and visualizes multiple vectors with varying distance values (from 1 to 3 in
    5 steps) and fixed angle (pi/4).

    8.3.3   Generating Multiple Vectors with Angle Range

1   python generalized / main . py -R 0 0 0 -d 1.5 -- theta - range 0 10 3.14159

       This command generates and visualizes multiple vectors with fixed distance (1.5) and varying angle
    values (from 0 to pi in 10 steps).

    8.3.4   Endpoints-only Plotting

1   python generalized / main . py -- endpoints true

       This command generates a vector with default parameters and plots only the endpoints, not the
    arrows.

    8.3.5   Saving Plots

1   python generalized / main . py -- save - plots -- output - dir my_plots

        This command generates a vector with default parameters and saves the plots to the ’my plots’
    directory.

    8.3.6   Using a Configuration File

1   python generalized / main . py -- config my_config . json

       This command loads a configuration from a file and uses it to generate and visualize vectors.




                                                       23
    Orthogonal Vectors Generator                                                       Generalized Implementation


    8.3.7   Saving a Configuration File

1   python generalized / main . py -R 1 1 1 -d 2.0 -a 1.047 -- save - config my_config . json

        This command generates and visualizes a vector with custom parameters and saves the configuration
    to a file.

    8.4     Circle Examples
    The system includes three example scripts for generating and visualizing circle and sphere-like patterns:
1   # Generate a sphere - like pattern using orthogonal vector formulas
2   python generalized / e xample_ circle . py
3
4   # Generate a traditional circle in the XY plane
5   python generalized / e x a m p l e _ c i r c l e _ x y . py
6
7   # Generate a sphere - like pattern with improved visualization
8   python generalized / e x a m p l e _ o r t h o g o n a l _ c i r c l e . py

       These examples generate 73 points (from 0° to 360° in 5° increments) and plot only the endpoints of
    the vectors, providing a clear visualization of the patterns formed.

    8.5     Implementation Details
    The command-line interface is implemented in the main.py module using the argparse module from
    the Python standard library. The module defines a main function that parses command-line arguments,
    creates a configuration, generates vectors, and visualizes them.
       The command-line interface follows these steps:

      1. Parse command-line arguments using argparse.
      2. If a configuration file is specified, load the configuration from the file.
      3. Override the configuration with any command-line options that are specified.
      4. Generate orthogonal vectors using the configuration.

      5. If requested, check if the vectors are orthogonal and print the result.
      6. If verbose output is enabled, print vector coordinates and dot products.
      7. Visualize the vectors using the configuration.

      8. If requested, save the configuration to a file.

    8.6     Error Handling
    The command-line interface includes error handling for various scenarios, including:

       • Invalid command-line arguments (e.g., non-numeric values for numeric options).
       • Invalid configuration file (e.g., file not found, invalid JSON).

       • Invalid configuration parameters (e.g., negative distance parameter).

        When an error occurs, the command-line interface prints an error message and exits with a non-zero
    exit code.

    8.7     Help Message
    The command-line interface provides a help message that can be displayed using the --help option:
1   python -m generalized . main -- help

        The help message includes a description of the program, a list of all available options, and examples
    of how to use the program.


                                                           24
Orthogonal Vectors Generator                                                Generalized Implementation


9       Example Results
This section presents example results for different configurations of the Orthogonal Vector Visualization
System. It shows the generated vectors and their visualizations for various parameter values.

9.1     Single Vector Generation
The system generates a single R vector using scalar formulas. The default configuration uses the origin
[0, 0, 0] with a distance parameter of 1.0 and an angle parameter of π/4.

9.1.1    Scalar Formulation
The R vector is calculated using the following scalar formula:

                                  r                √                               √
          ⃗ =R
             ⃗ 0 + d · cos(θ) ·       2     cos(θ)/ 3 + sin(θ)     sin(θ) − cos(θ)/ 3    ⃗0
          R                             +d·        √           +d·         √          −2·R            (3)
                                      3              2                       2
    This formula combines three orthogonal components to produce a single resulting vector.

9.1.2    3D Visualization




                   Figure 7: 3D visualization of the orthogonal vector configuration




                                                     25
    Orthogonal Vectors Generator                                                 Generalized Implementation


    9.1.3   2D Projections




                        Figure 8: 2D projections of the orthogonal vector configuration

    9.2     Multiple Vector Generation
    The system supports generating multiple vectors by specifying ranges for the distance and angle param-
    eters. This is particularly useful for exploring the effects of varying parameters on the resulting vectors
    and for generating complex patterns.

    9.2.1   Distance Range Example
    This example generates multiple vectors with varying distance values (from 1 to 3 in 5 steps) and a fixed
    angle (π/4):
1   python generalized / main . py -R 0 0 0 --d - range 1 5 3 -a 0.7854


    9.2.2   Angle Range Example
    This example generates multiple vectors with a fixed distance (1.5) and varying angle values (from 0 to
    π in 10 steps):
1   python generalized / main . py -R 0 0 0 -d 1.5 -- theta - range 0 10 3.14159




                                                        26
    Orthogonal Vectors Generator                                                 Generalized Implementation


    9.3     Circle Examples
    The system includes three example scripts demonstrating different approaches to generating and visual-
    izing circle and sphere-like patterns. Each example generates 73 points (from 0° to 360° in 5° increments)
    and plots only the endpoints of the vectors.

    9.3.1   Orthogonal Vector Circle
    The example circle.py script generates points using orthogonal vector formulas, creating a sphere-like
    pattern:
1   python generalized / e xample_ circle . py




                           Figure 9: 3D visualization of the orthogonal vector circle




                                                       27
    Orthogonal Vectors Generator                                                            Generalized Implementation




    Figure 10: XY projection of the orthogonal vector                  Figure 11: XZ projection of the orthogonal vector
    circle                                                             circle




    Figure 12: YZ projection of the orthogonal vector                  Figure 13: Origin plane projection of the orthog-
    circle                                                             onal vector circle

    9.3.2     Traditional XY Circle
    The example circle xy.py script creates a traditional circle in the XY plane:
1   python generalized / e x a m p l e _ c i r c l e _ x y . py




                                                                  28
Orthogonal Vectors Generator                                               Generalized Implementation




                           Figure 14: Traditional circle in the XY plane




                                                29
    Orthogonal Vectors Generator                                                       Generalized Implementation




                                    Figure 15: 3D visualization of the traditional XY circle

    9.3.3     Improved Orthogonal Vector Circle
    The example orthogonal circle.py script is similar to the first example but with improved visualiza-
    tion:
1   python generalized / e x a m p l e _ o r t h o g o n a l _ c i r c l e . py




                                                                         30
Orthogonal Vectors Generator                                                Generalized Implementation




                 Figure 16: 3D visualization of the improved orthogonal vector circle




Figure 17: XY projection of the improved orthog-        Figure 18: XZ projection of the improved orthog-
onal vector circle                                      onal vector circle




                                                   31
Orthogonal Vectors Generator                                                   Generalized Implementation




Figure 19: YZ projection of the improved orthog-          Figure 20: Origin plane projection of the improved
onal vector circle                                        orthogonal vector circle

9.4     Parameter Effects in Scalar Formulation
The scalar formulation uses two key parameters to control the generated vectors: the distance parameter
d and the angle parameter θ. These parameters interact with the origin vector to produce a wide variety
of vector configurations while maintaining orthogonality.

9.4.1   Distance Parameter
In the scalar formulation, the distance parameter d appears as a scaling factor in the formula:

                                  r                √                               √
          ⃗ =R
             ⃗ 0 + d · cos(θ) ·       2     cos(θ)/ 3 + sin(θ)     sin(θ) − cos(θ)/ 3    ⃗0
          R                             +d·        √           +d·         √          −2·R               (4)
                                      3              2                       2
    This parameter controls the overall scale of the vector displacement from the origin. Larger values of
d result in vectors that extend further from the origin, while smaller values produce vectors closer to the
origin. The distance parameter affects all components of the vector equally, preserving the directional
properties determined by θ.

9.4.2   Angle Parameter
The angle parameter θ appears in both sine and cosine terms in the scalar formula. This parameter
controls the orientation of the generated vector. As θ varies, the vector traces a path in three-dimensional
space that maintains a constant distance from the origin (for fixed d).
    Unlike traditional 2D rotation, the angle parameter in this formulation produces a more complex
rotation in 3D space. This is because the sine and cosine terms affect multiple components of the vector
in a carefully balanced way that preserves orthogonality.
    When θ is varied from 0 to 2π with a fixed distance parameter, the resulting vectors form a pattern
that lies on a sphere centered at the origin. This is a direct consequence of the mathematical properties
of the scalar formula.

9.5     Vector Origin Visualization
The origin parameter R ⃗ 0 shifts the entire vector system, preserving the orthogonality of the displacement
vectors. Different origin points result in different positions of the vectors in space.



                                                     32
Orthogonal Vectors Generator                                              Generalized Implementation


9.5.1   3D Visualizations




         Figure 21: Combined effect of distance and angle parameters with origin at (0, 0, 0)

9.5.2   Combined 3D and Origin Plane Views
The combined views show both the 3D vectors and their origin plane projections side by side, providing
a comprehensive understanding of the vector relationships.




                                                 33
Orthogonal Vectors Generator                                                    Generalized Implementation




          Figure 22: Combined 3D and R0 plane view with origin at (0, 0, 0), d = 1.5, θ = π/4

    Vector Origin Visualization: The origin parameter R         ⃗ 0 shifts the entire vector system, preserving
the orthogonality of the displacement vectors. Different origin points result in different positions of
the vectors in space. The figure above demonstrates how the distance and angle parameters affect the
vector visualization. This illustrates the flexibility of the generalized orthogonal vectors implementation
in creating various vector configurations.

9.6    Summary of Results
The example results demonstrate that the Generalized Orthogonal Vectors Generator and Visualizer suc-
cessfully generates and visualizes orthogonal vectors for various configurations. The vectors are confirmed
to be orthogonal by calculating their dot products, which are all zero (within numerical precision).
    The visualizations show the vectors in both 3D and 2D projections, providing different perspectives
on their spatial relationships. The effects of the distance parameter, angle parameter, and origin on the
vector system are also demonstrated.


10     Conclusion
The Generalized Orthogonal Vectors Generator and Visualizer package provides a comprehensive solu-
tion for generating and visualizing orthogonal vectors in three-dimensional space. This document has
described the mathematical formulation, implementation details, API reference, usage examples, visual-
ization techniques, configuration system, command-line interface, and example results of the package.

10.1     Summary of Features
The package offers the following key features:

   • Mathematical Rigor: The package is based on a mathematically proven formulation for gener-
     ating orthogonal vectors, ensuring the correctness of the results.
   • Modular Architecture: The package is organized into separate modules for vector calculations,
     visualization, and configuration management, making it easy to maintain, extend, and reuse.
   • Configurability: All aspects of vector generation and visualization can be configured through a
     unified configuration system, allowing for customization without modifying the code.
   • Command-line Interface: The package provides a comprehensive command-line interface that
     allows users to generate and visualize orthogonal vectors without writing Python code.



                                                      34
Orthogonal Vectors Generator                                               Generalized Implementation


   • Configuration File Support: Configurations can be saved to and loaded from JSON files, making
     it easy to reuse configurations across different runs.
   • Multiple Visualization Options: The package supports both 3D visualization and various 2D
     projections, providing different perspectives on the vectors.
   • Plot Saving: Plots can be saved to files instead of being displayed interactively, allowing for the
     creation of visualizations for documentation or presentations.
   • Python Package: The package can be used as a Python package, allowing for integration into
     other projects.

10.2    Potential Applications
The Generalized Orthogonal Vectors Generator and Visualizer package can be used in various applica-
tions, including:

   • Educational Tools: The package can be used as an educational tool for teaching concepts related
     to vectors, orthogonality, and three-dimensional geometry.
   • Scientific Visualization: The package can be used for visualizing orthogonal vectors in scientific
     applications, such as physics simulations or computational geometry.
   • Computer Graphics: The package can be used in computer graphics applications that require
     orthogonal coordinate systems, such as camera positioning or object orientation.
   • Robotics: The package can be used in robotics applications that require orthogonal coordinate
     systems, such as robot arm positioning or sensor orientation.

10.3    Future Work
The Generalized Orthogonal Vectors Generator and Visualizer package can be extended in various ways,
including:

   • Additional Visualization Options: The package could be extended to support additional visu-
     alization options, such as interactive 3D visualization or animation of vector rotation.
   • More Advanced Configuration Management: The configuration management system could
     be extended to support more advanced features, such as configuration validation or configuration
     inheritance.
   • Integration with Other Packages: The package could be integrated with other Python packages
     for scientific computing or visualization, such as SciPy or Plotly.
   • Web Interface: The package could be extended to provide a web interface for generating and
     visualizing orthogonal vectors, making it accessible to users without Python knowledge.
   • Performance Optimization: The package could be optimized for performance, especially for
     applications that require generating and visualizing a large number of vectors.
   • Unit Tests: The package could be extended with comprehensive unit tests to ensure the correctness
     of the implementation.
   • Documentation Improvements: The documentation could be improved with more examples,
     tutorials, and explanations of the mathematical concepts.

10.4    Conclusion
The Generalized Orthogonal Vectors Generator and Visualizer package provides a powerful and flexible
tool for generating and visualizing orthogonal vectors in three-dimensional space. Its modular archi-
tecture, configurability, and comprehensive features make it suitable for a wide range of applications,
from educational tools to scientific visualization. The package is designed to be easy to use, both as
a command-line tool and as a Python package, making it accessible to users with different levels of
programming experience.


                                                  35
     Orthogonal Vectors Generator                                                      Generalized Implementation


     A       Source Code
     This appendix contains the complete source code for the Orthogonal Vector Visualization System package.

     A.1      Example Scripts
     A.1.1     example circle.py

 1 # !/ usr / bin / env python3
 2 import numpy as np
 3 import matplotlib . pyplot as plt
 4 import math
 5 import os
 6 import sys
 7
 8 # Import from the generalized module
 9 from vector_utils import c r e a t e _ o r t h o g o n a l _ v e c t o r s
10 from visualization import plot_multiple_vectors_3d , plot_multiple_vectors_2d ,
       plot_multiple_vectors
11
12   def g e n e r a t e _ c i r c l e _ p o i n t s () :
13       """
14       Generate 72 points in a circle by varying theta from 0 to 360 degrees
15       with a fixed distance d =0.1 from origin R_0 =(0 ,0 ,0)
16
17         Returns :
18         list : List of tuples (d , theta , R ) containing the parameters and vectors
19         """
20         # Set parameters
21         R_0 = np . array ([0 , 0 , 0]) # Origin
22         d = 0.1                        # Fixed distance
23
24         # Generate theta values from 0 to 360 degrees in steps of 5 degrees
25         # Convert to radians for calculations
26         theta_values = np . radians ( np . arange (0 , 361 , 5) )
27
28         # Generate vectors for each theta value
29         vectors = []
30         for theta in theta_values :
31             R = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( R_0 , d , theta )
32             vectors . append (( d , theta , R ) )
33             print ( f " Generated point for theta ={ math . degrees ( theta ) :.1 f } deg : { R } " )
34
35         return R_0 , vectors
36
37   def main () :
38       """
39       Main function to generate and visualize circle points
40       """
41       print ( " Generating circle points ... " )
42       R_0 , vectors = g e n e r a t e _ c i r c l e _ p o i n t s ()
43
44         print ( f " \ nGenerated { len ( vectors ) } points . " )
45
46         # Create plots directory if it doesn ’t exist
47         output_dir = ’ circle_plots ’
48         os . makedirs ( output_dir , exist_ok = True )
49
50         # Plot the points
51         print ( " Creating plots ... " )
52         plots = p l o t _ m u l t i p l e _ v e c t o r s (
53             R_0 ,
54             vectors ,
55             show_r0_plane = True ,
56             figsize_3d =(12 , 10) ,
57             figsize_2d =(10 , 10) ,
58             endp oints_on ly = True # Only plot the endpoints
59         )
60
61         # Save the plots
62         for name , ( fig , _ ) in plots . items () :
63             filename = os . path . join ( output_dir , f " circle_ { name }. png " )


                                                              36
     Orthogonal Vectors Generator                                                                Generalized Implementation


64              fig . savefig ( filename )
65              print ( f " Saved plot to { filename } " )
66
67        # Show the plots
68        plt . show ()
69
70   if __name__ == " __main__ " :
71       main ()


     A.1.2     example circle xy.py

 1 # !/ usr / bin / env python3
 2 import numpy as np
 3 import matplotlib . pyplot as plt
 4 import math
 5 import os
 6 import sys
 7
 8   def g e n e r a t e _ c i r c l e _ p o i n t s _ x y () :
 9       """
10       Generate 72 points in a circle in the XY plane by varying theta from 0 to 360
         degrees
11       with a fixed radius of 0.1 from origin (0 ,0 ,0)
12
13        Returns :
14        tuple : ( R_0 , vectors ) where R_0 is the origin and vectors is a list of (d , theta , R )
           tuples
15        """
16        # Set parameters
17        R_0 = np . array ([0 , 0 , 0]) # Origin
18        radius = 0.1                   # Circle radius
19
20        # Generate theta values from 0 to 360 degrees in steps of 5 degrees
21        # Convert to radians for calculations
22        theta_values = np . radians ( np . arange (0 , 361 , 5) )
23
24        # Generate vectors for each theta value ( traditional circle in XY plane )
25        vectors = []
26        for theta in theta_values :
27            # Create a point on the circle in the XY plane
28            x = radius * np . cos ( theta )
29            y = radius * np . sin ( theta )
30            z = 0 # Set z =0 for a flat circle in XY plane
31
32              R = np . array ([ x , y , z ])
33              vectors . append (( radius , theta , R ) )
34              print ( f " Generated point for theta ={ math . degrees ( theta ) :.1 f } deg : { R } " )
35
36        return R_0 , vectors
37
38   def p l o t _ m u l t i p l e _ v e c t o r s _ 3 d ( R_0 , vectors , figsize =(12 , 10) , show_legend = True ,
         endpo ints_on ly = True ) :
39       """
40       Plot multiple vectors in 3 D
41
42        Parameters :
43        R_0 ( numpy . ndarray ) : The origin vector
44        vectors ( list ) : List of tuples (d , theta , R ) containing the parameters and vectors
45        figsize ( tuple ) : Figure size ( width , height ) in inches
46        show_legend ( bool ) : Whether to show the legend
47        endpo ints_on ly ( bool ) : If True , only plot the endpoints of vectors , not the arrows
48
49        Returns :
50        tuple : ( fig , ax ) matplotlib figure and axis objects
51        """
52        fig = plt . figure ( figsize = figsize )
53        ax = fig . add_subplot (111 , projection = ’3 d ’)
54
55        # Plot the origin
56        ax . scatter ( R_0 [0] , R_0 [1] , R_0 [2] , color = ’ black ’ , s =100 , label = ’ R_0 ’)
57
58        # Get a colormap for the vectors


                                                                  37
      Orthogonal Vectors Generator                                                                 Generalized Implementation


59         cmap = plt . cm . get_cmap ( ’ viridis ’)
60         num_vectors = len ( vectors )
61
62         # Extract all R vectors for axis scaling
63         all_Rs = [ R for _ , _ , R in vectors ]
64
65         # Plot the vectors
66         for i , (d , theta , R ) in enumerate ( vectors ) :
67             color = cmap ( i / max (1 , num_vectors - 1) )
68             label = f ’R ( theta ={ math . degrees ( theta ) :.1 f } deg ) ’ if i % 10 == 0 else None
69
70              # Plot only the endpoint
71              ax . scatter ( R [0] , R [1] , R [2] , color = color , s =50 , label = label )
72
73         # Set labels and title
74         ax . set_xlabel ( ’X ’)
75         ax . set_ylabel ( ’Y ’)
76         ax . set_zlabel ( ’Z ’)
77         ax . set_title ( ’ Circle Points in 3 D ( XY Plane ) ’)
78
79         # Set equal aspect ratio
80         all_points = [ R_0 ] + all_Rs
81         max_range = np . array ([
82               np . max ([ p [0] for p in all_points ]) - np . min ([ p [0] for p in all_points ]) ,
83               np . max ([ p [1] for p in all_points ]) - np . min ([ p [1] for p in all_points ]) ,
84               np . max ([ p [2] for p in all_points ]) - np . min ([ p [2] for p in all_points ])
85         ]) . max () / 2.0
86
87        mid_x = ( np . max ([ p [0] for p in all_points ]) + np . min ([ p [0] for p in all_points ]) ) /
          2
88        mid_y = ( np . max ([ p [1] for p in all_points ]) + np . min ([ p [1] for p in all_points ]) ) /
          2
89        mid_z = ( np . max ([ p [2] for p in all_points ]) + np . min ([ p [2] for p in all_points ]) ) /
          2
90
91         ax . set_xlim ( mid_x - max_range , mid_x + max_range )
92         ax . set_ylim ( mid_y - max_range , mid_y + max_range )
93         ax . set_zlim ( mid_z - max_range , mid_z + max_range )
94
95         if show_legend :
96             ax . legend ()
97
98         return fig , ax
99
100   def main () :
101       """
102       Main function to generate and visualize circle points
103       """
104       print ( " Generating XY circle points ... " )
105       R_0 , vectors = g e n e r a t e _ c i r c l e _ p o i n t s _ x y ()
106
107        print ( f " \ nGenerated { len ( vectors ) } points . " )
108
109        # Create plots directory if it doesn ’t exist
110        output_dir = ’ circle_plots ’
111        os . makedirs ( output_dir , exist_ok = True )
112
113        # Plot the points in 3 D
114        print ( " Creating 3 D plot ... " )
115        fig_3d , _ = p l o t _ m u l t i p l e _ v e c t o r s _ 3 d ( R_0 , vectors , endpo ints_on ly = True )
116
117        # Save the 3 D plot
118        filename_3d = os . path . join ( output_dir , " 3 d_xy_circle . png " )
119        fig_3d . savefig ( filename_3d )
120        print ( f " Saved 3 D plot to { filename_3d } " )
121
122        # Plot the points in 2 D ( XY plane )
123        print ( " Creating 2 D plot ... " )
124        fig_2d = plt . figure ( figsize =(10 , 10) )
125        ax_2d = fig_2d . add_subplot (111)
126
127        # Plot the origin
128        ax_2d . scatter ( R_0 [0] , R_0 [1] , color = ’ black ’ , s =100 , label = ’ R_0 ’)



                                                                    38
      Orthogonal Vectors Generator                                                   Generalized Implementation


129
130       # Get a colormap for the vectors
131       cmap = plt . cm . get_cmap ( ’ viridis ’)
132       num_vectors = len ( vectors )
133
134       # Plot the vectors
135       for i , (d , theta , R ) in enumerate ( vectors ) :
136           color = cmap ( i / max (1 , num_vectors - 1) )
137           label = f ’R ( theta ={ math . degrees ( theta ) :.1 f } deg ) ’ if i % 10 == 0 else None
138           ax_2d . scatter ( R [0] , R [1] , color = color , s =50 , label = label )
139
140       # Set labels and title
141       ax_2d . set_xlabel ( ’X ’)
142       ax_2d . set_ylabel ( ’Y ’)
143       ax_2d . set_title ( ’ Circle Points in XY Plane ’)
144       ax_2d . grid ( True )
145       ax_2d . axis ( ’ equal ’)
146       ax_2d . legend ()
147
148       # Save the 2 D plot
149       filename_2d = os . path . join ( output_dir , " xy_circle . png " )
150       fig_2d . savefig ( filename_2d )
151       print ( f " Saved 2 D plot to { filename_2d } " )
152
153       # Show the plots
154       plt . show ()
155
156   if __name__ == " __main__ " :
157       main ()


      A.1.3   example orthogonal circle.py

  1 # !/ usr / bin / env python3
  2 import numpy as np
  3 import matplotlib . pyplot as plt
  4 import math
  5 import os
  6 import sys
  7
  8# Import from the generalized module
  9from vector_utils import c r e a t e _ o r t h o g o n a l _ v e c t o r s
10 from visualization import p l o t _ m u l t i p l e _ v e c t o r s
11
12    def g e n e r a t e _ o r t h o g o n a l _ c i r c l e _ p o i n t s () :
13        """
14        Generate points in a circle - like pattern using the orthogonal vector formulas
15        with a fixed distance d =0.1 from origin R_0 =(0 ,0 ,0) and varying theta
16
17        Returns :
18        tuple : ( R_0 , vectors ) where R_0 is the origin and vectors is a list of (d , theta , R )
           tuples
19        """
20        # Set parameters
21        R_0 = np . array ([0 , 0 , 0]) # Origin
22        d = 0.1                        # Fixed distance
23
24        # Generate theta values from 0 to 360 degrees in steps of 5 degrees
25        # Convert to radians for calculations
26        theta_values = np . radians ( np . arange (0 , 361 , 5) )
27
28        # Generate vectors for each theta value using the orthogonal vector formula
29        vectors = []
30        for theta in theta_values :
31            R = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( R_0 , d , theta )
32            vectors . append (( d , theta , R ) )
33            print ( f " Generated point for theta ={ math . degrees ( theta ) :.1 f } deg : { R } " )
34
35        return R_0 , vectors
36
37    def main () :
38        """
39        Main function to generate and visualize orthogonal circle points


                                                                   39
     Orthogonal Vectors Generator                                                                 Generalized Implementation


40         """
41         print ( " Generating orthogonal circle points ... " )
42         R_0 , vectors = g e n e r a t e _ o r t h o g o n a l _ c i r c l e _ p o i n t s ()
43
44         print ( f " \ nGenerated { len ( vectors ) } points . " )
45
46         # Create plots directory if it doesn ’t exist
47         output_dir = ’ circle_plots ’
48         os . makedirs ( output_dir , exist_ok = True )
49
50         # Plot the points
51         print ( " Creating plots ... " )
52         plots = p l o t _ m u l t i p l e _ v e c t o r s (
53             R_0 ,
54             vectors ,
55             show_r0_plane = True ,
56             figsize_3d =(12 , 10) ,
57             figsize_2d =(10 , 10) ,
58             endp oints_on ly = True # Only plot the endpoints
59         )
60
61         # Save the plots
62         for name , ( fig , _ ) in plots . items () :
63             filename = os . path . join ( output_dir , f " orthogonal_ { name }. png " )
64             fig . savefig ( filename )
65             print ( f " Saved plot to { filename } " )
66
67         # Show the plots
68         plt . show ()
69
70   if __name__ == " __main__ " :
71       main ()



     A.2       main.py
 1 # !/ usr / bin / env python3
 2 import numpy as np
 3 import matplotlib . pyplot as plt
 4 import argparse
 5 import math
 6 import os
 7 import sys
 8
 9   from vector_utils import create_orthogonal_vectors , c h e c k _ o r t h o g o n a l i t y
10   from visualization import plot_vectors_3d , plot_vectors_2d_projection ,
         plot_all_projections
11   from config import VectorConfig , d efault_ config
12
13   def p ar se _ ar gu me n ts () :
14       """
15       Parse command line arguments
16
17         Returns :
18         argparse . Namespace : Parsed arguments
19         """
20         parser = argparse . Argument Parser ( description = ’ Generate and visualize orthogonal
           vectors ’)
21
22         # Vector parameters
23         parser . add_argument ( ’ -- origin ’ , ’ -R ’ , type = float , nargs =3 , default =[0 , 0 , 0] ,
24                                 help = ’ Origin vector R_0 ( x y z ) ’)
25         parser . add_argument ( ’ -- distance ’ , ’ -d ’ , type = float , default =1 ,
26                                 help = ’ Distance parameter d ’)
27         parser . add_argument ( ’ -- angle ’ , ’ -a ’ , type = float , default = math . pi /4 ,
28                                 help = ’ Angle parameter theta in radians ’)
29
30         # Visualization parameters
31         parser . add_argument ( ’ --no - r0 - plane ’ , action = ’ store_false ’ , dest = ’ show_r0_plane ’ ,
32                                 help = ’ Do not show the R_0 plane projection ’)
33         parser . add_argument ( ’ --no - legend ’ , action = ’ store_false ’ , dest = ’ show_legend ’ ,
34                                 help = ’ Do not show the legend ’)
35         parser . add_argument ( ’ --no - grid ’ , action = ’ store_false ’ , dest = ’ show_grid ’ ,


                                                                             40
      Orthogonal Vectors Generator                                              Generalized Implementation


36                                 help = ’ Do not show the grid ’)
37
38        # Output parameters
39        parser . add_argument ( ’ -- save - plots ’ , action = ’ store_true ’ ,
40                                help = ’ Save plots to files instead of displaying them ’)
41        parser . add_argument ( ’ -- output - dir ’ , type = str , default = ’ plots ’ ,
42                                help = ’ Directory to save plots to ’)
43        parser . add_argument ( ’ -- config ’ , type = str ,
44                                help = ’ Path to configuration file ’)
45        parser . add_argument ( ’ -- save - config ’ , type = str ,
46                                help = ’ Save configuration to file ’)
47
48        return parser . parse_args ()
49
50    def display_help () :
51        """
52        Display detailed help information
53        """
54        help_text = """
55        Orthogonal Vectors Generator and Visualizer
56        =======================================
57
58        This tool generates and visualizes three orthogonal vectors from a given origin
          point .
59
60        Basic Usage :
61        -----------
62        python main . py                                     # Use default parameters
63        python main . py -R 1 1 1                           # Set origin to (1 ,1 ,1)
64        python main . py -R 0 0 2 -d 1.5 -a 0.5236          # Custom origin , distance and angle
65        python main . py -- help                            # Show help
66
67        Parameters :
68        ----------
69        -R , -- origin X Y Z       : Set the origin vector R_0 coordinates ( default : 0 0 0)
70        -d , -- distance VALUE     : Set the distance parameter ( default : 1)
71        -a , -- angle VALUE        : Set the angle parameter in radians ( default : \ pi /4)
72
73        Visualization Options :
74        --------------------
75        --no - r0 - plane     : Do not show the R_0 plane projection
76        --no - legend         : Do not show the legend
77        --no - grid           : Do not show the grid
78
79        Output Options :
80        --------------
81        -- save - plots           : Save plots to files instead of displaying them
82        -- output - dir DIR       : Directory to save plots to ( default : ’ plots ’)
83
84        Configuration :
85        -------------
86        -- config FILE            : Load configuration from a JSON file
87        -- save - config FILE     : Save current configuration to a JSON file
88
89        Examples :
90        - - - - - - --
91        # Generate vectors with origin at (1 ,1 ,1) , distance 2 , and angle \ pi /3
92        python main . py -R 1 1 1 -d 2 -a 1.047
93
94        # Save plots to a custom directory
95        python main . py -R 0 0 2 -- save - plots -- output - dir my_plots
96
97        # Load configuration from a file
98        python main . py -- config my_config . json
99        """
100       print ( help_text )
101       sys . exit (0)
102
103   def main () :
104       """
105       Main function
106       """
107       # Check for detailed help command



                                                         41
      Orthogonal Vectors Generator                                                                    Generalized Implementation


108         if len ( sys . argv ) > 1 and sys . argv [1] == ’ help ’:
109             display_help ()
110
111         # Parse command line arguments
112         args = pa rs e _a rg um e nt s ()
113
114         # Load configuration
115         if args . config :
116              config = VectorConfig . l oad_fro m_file ( args . config )
117         else :
118              # Create configuration from command line arguments
119              config = VectorConfig (
120                   R_0 = args . origin ,
121                   d = args . distance ,
122                   theta = args . angle ,
123                   show_r0_plane = args . show_r0_plane ,
124                   show_legend = args . show_legend ,
125                   show_grid = args . show_grid
126              )
127
128         # Save configuration if requested
129         if args . save_config :
130             config . save_to_file ( args . save_config )
131
132         # Create the orthogonal vectors
133         R_0 = config . R_0
134         R_1 , R_2 , R_3 = c r e a t e _ o r t h o g o n a l _ v e c t o r s ( R_0 , config .d , config . theta )
135
136         # Print vector information
137         print ( " R_0 : " , R_0 )
138         print ( " R_1 : " , R_1 )
139         print ( " R_2 : " , R_2 )
140         print ( " R_3 : " , R_3 )
141
142         # Check orthogonality
143         orthogonality = c h e c k _ o r t h o g o n a l i t y ( R_0 , R_1 , R_2 , R_3 )
144         print ( " \ nChecking orthogonality ( dot products should be close to zero ) : " )
145         for key , value in orthogonality . items () :
146             print ( f " { key }: { value } " )
147
148         # Plot the vectors
149         plots = p l o t _ a l l _ p r o j e c t i o n s (
150             R_0 , R_1 , R_2 , R_3 ,
151             show_r0_plane = config . show_r0_plane ,
152             figsize_3d = config . figsize_3d ,
153             figsize_2d = config . figsize_2d
154         )
155
156         # Save or show the plots
157         if args . save_plots :
158             # Create output directory if it doesn ’t exist
159             os . makedirs ( args . output_dir , exist_ok = True )
160
161              # Save each plot
162              for name , ( fig , _ ) in plots . items () :
163                    filename = os . path . join ( args . output_dir , f " { name }. png " )
164                    fig . savefig ( filename )
165                    print ( f " Saved plot to { filename } " )
166         else :
167              # Show the plots
168              plt . show ()
169
170   if __name__ == " __main__ " :
171       main ()



      A.3       vector utils.py
  1   # !/ usr / bin / env python3
  2   import numpy as np
  3
  4   def c r e a t e _ o r t h o g o n a l _ v e c t o r s ( R_0 =(0 , 0 , 0) , d =1 , theta =0) :
  5       """


                                                                          42
     Orthogonal Vectors Generator                                                         Generalized Implementation


 6         Create 3 orthogonal R vectors for R_0
 7
 8         Parameters :
 9         R_0 ( tuple or numpy . ndarray ) : The origin vector , default is (0 , 0 , 0)
10         d ( float ) : The distance parameter , default is 1
11         theta ( float ) : The angle parameter in radians , default is 0
12
13         Returns :
14         tuple : Three orthogonal vectors R_1 , R_2 , R_3
15         """
16         # Convert R_0 to numpy array for vector operations
17         R_0 = np . array ( R_0 )
18
19         # Calculate R_1 , R_2 , R_3 according to the given formulas
20         # R_1 = R_0 + d * ( cos ( theta ) ) * sqrt (2/3)
21         R_1 = R_0 + d * np . cos ( theta ) * np . sqrt (2/3) * np . array ([1 , -1/2 , -1/2])
22
23         # R_2 = R_0 + d * ( cos ( theta ) / sqrt (3) + sin ( theta ) ) / sqrt (2)
24         R_2 = R_0 + d * ( np . cos ( theta ) / np . sqrt (3) + np . sin ( theta ) ) / np . sqrt (2) * np . array ([1 ,
            1 , 1])
25
26         # R_3 = R_0 + d * ( sin ( theta ) - cos ( theta ) / sqrt (3) ) / sqrt (2)
27         R_3 = R_0 + d * ( np . sin ( theta ) - np . cos ( theta ) / np . sqrt (3) ) / np . sqrt (2) * np . array ([0 ,
            -1/2 , 1/2]) * np . sqrt (2)
28
29         return R_1 , R_2 , R_3
30
31   def c h e c k _ o r t h o g o n a l i t y ( R_0 , R_1 , R_2 , R_3 ) :
32       """
33       Check if the vectors R_1 , R_2 , R_3 are orthogonal with respect to R_0
34
35         Parameters :
36         R_0 , R_1 , R_2 , R_3 ( numpy . ndarray ) : The vectors to check
37
38         Returns :
39         dict : Dictionary containing        the dot products between pairs of vectors
40         """
41         dot_1_2 = np . dot ( R_1 - R_0 ,    R_2 - R_0 )
42         dot_1_3 = np . dot ( R_1 - R_0 ,    R_3 - R_0 )
43         dot_2_3 = np . dot ( R_2 - R_0 ,    R_3 - R_0 )
44
45         return {
46             " R_1 $ \ cdot$ R_2 " : dot_1_2 ,
47             " R_1 $ \ cdot$ R_3 " : dot_1_3 ,
48             " R_2 $ \ cdot$ R_3 " : dot_2_3
49         }



     A.4      config.py
 1 # !/ usr / bin / env python3
 2 import numpy as np
 3 import math
 4 import json
 5 import os
 6
 7   class VectorConfig :
 8       """
 9       Configuration class for orthogonal vector generation and visualization
10       """
11       def __init__ ( self ,
12                      R_0 =(0 , 0 , 0) ,
13                      d =1 ,
14                      theta = math . pi /4 ,
15                      show_r0_plane = True ,
16                      figsize_3d =(10 , 8) ,
17                      figsize_2d =(8 , 8) ,
18                      show_legend = True ,
19                      show_grid = True ) :
20           """
21           Initialize the configuration
22
23              Parameters :


                                                              43
     Orthogonal Vectors Generator                                               Generalized Implementation


24           R_0 ( tuple or list ) : The origin vector
25           d ( float ) : The distance parameter
26           theta ( float ) : The angle parameter in radians
27           show_r0_plane ( bool ) : Whether to show the R_0 plane projection
28           figsize_3d ( tuple ) : Figure size for 3 D plot
29           figsize_2d ( tuple ) : Figure size for 2 D plots
30           show_legend ( bool ) : Whether to show the legend
31           show_grid ( bool ) : Whether to show the grid
32           """
33           self . R_0 = np . array ( R_0 )
34           self . d = d
35           self . theta = theta
36           self . show_r0_plane = show_r0_plane
37           self . figsize_3d = figsize_3d
38           self . figsize_2d = figsize_2d
39           self . show_legend = show_legend
40           self . show_grid = show_grid
41
42       def to_dict ( self ) :
43           """
44           Convert the configuration to a dictionary
45
46           Returns :
47           dict : Dictionary r epresent ation of the configuration
48           """
49           return {
50                ’ R_0 ’: self . R_0 . tolist () ,
51                ’d ’: self .d ,
52                ’ theta ’: self . theta ,
53                ’ show_r0_plane ’: self . show_r0_plane ,
54                ’ figsize_3d ’: self . figsize_3d ,
55                ’ figsize_2d ’: self . figsize_2d ,
56                ’ show_legend ’: self . show_legend ,
57                ’ show_grid ’: self . show_grid
58           }
59
60       @classmethod
61       def from_dict ( cls , config_dict ) :
62           """
63           Create a configuration from a dictionary
64
65           Parameters :
66           config_dict ( dict ) : Dictionary containing configuration parameters
67
68           Returns :
69           VectorConfig : Configuration object
70           """
71           return cls (
72               R_0 = config_dict . get ( ’ R_0 ’ , (0 , 0 , 0) ) ,
73               d = config_dict . get ( ’d ’ , 1) ,
74               theta = config_dict . get ( ’ theta ’ , math . pi /4) ,
75               show_r0_plane = config_dict . get ( ’ show_r0_plane ’ , True ) ,
76               figsize_3d = config_dict . get ( ’ figsize_3d ’ , (10 , 8) ) ,
77               figsize_2d = config_dict . get ( ’ figsize_2d ’ , (8 , 8) ) ,
78               show_legend = config_dict . get ( ’ show_legend ’ , True ) ,
79               show_grid = config_dict . get ( ’ show_grid ’ , True )
80           )
81
82       def save_to_file ( self , filename ) :
83           """
84           Save the configuration to a JSON file
85
86           Parameters :
87           filename ( str ) : Path to the output file
88           """
89           with open ( filename , ’w ’) as f :
90               json . dump ( self . to_dict () , f , indent =4)
91
92       @classmethod
93       def load_fr om_file ( cls , filename ) :
94           """
95           Load a configuration from a JSON file
96




                                                        44
      Orthogonal Vectors Generator                                                         Generalized Implementation


97               Parameters :
98               filename ( str ) : Path to the input file
99
100             Returns :
101             VectorConfig : Configuration object
102             """
103             if not os . path . exists ( filename ) :
104                 print ( f " Warning : Config file { filename } not found . Using default
            configuration . " )
105                 return cls ()
106
107              with open ( filename , ’r ’) as f :
108                  config_dict = json . load ( f )
109
110              return cls . from_dict ( config_dict )
111
112   # Default configuration
113   defa ult_conf ig = VectorConfig ()



      A.5      visualization.py
  1 # !/ usr / bin / env python3
  2 import numpy as np
  3 import matplotlib . pyplot as plt
  4 from mpl_toolkits . mplot3d import Axes3D
  5
  6   def p lo t_ v ec to rs _ 3d ( R_0 , R_1 , R_2 , R_3 , figsize =(10 , 8) , show_legend = True ) :
  7       """
  8       Plot the vectors in 3 D
  9
10          Parameters :
11          R_0 ( numpy . ndarray ) : The origin vector
12          R_1 , R_2 , R_3 ( numpy . ndarray ) : The three orthogonal vectors
13          figsize ( tuple ) : Figure size ( width , height ) in inches
14          show_legend ( bool ) : Whether to show the legend
15
16          Returns :
17          tuple : ( fig , ax ) matplotlib figure and axis objects
18          """
19          fig = plt . figure ( figsize = figsize )
20          ax = fig . add_subplot (111 , projection = ’3 d ’)
21
22          # Plot the origin
23          ax . scatter ( R_0 [0] , R_0 [1] , R_0 [2] , color = ’ black ’ , s =100 , label = ’ R_0 ’)
24
25          # Plot the vectors as arrows from the origin
26          vectors = [ R_1 , R_2 , R_3 ]
27          colors = [ ’r ’ , ’g ’ , ’b ’]
28          labels = [ ’ R_1 ’ , ’ R_2 ’ , ’ R_3 ’]
29
30          for i , ( vector , color , label ) in enumerate ( zip ( vectors , colors , labels ) ) :
31              ax . quiver ( R_0 [0] , R_0 [1] , R_0 [2] ,
32                          vector [0] - R_0 [0] , vector [1] - R_0 [1] , vector [2] - R_0 [2] ,
33                          color = color , label = label , a r r o w _ l e n g t h _ r a t i o =0.1)
34
35          # Set labels and title
36          ax . set_xlabel ( ’X ’)
37          ax . set_ylabel ( ’Y ’)
38          ax . set_zlabel ( ’Z ’)
39          ax . set_title ( ’3 D Plot of Orthogonal Vectors ’)
40
41          # Set equal aspect ratio
42          max_range = np . array ([
43                np . max ([ R_0 [0] , R_1 [0] , R_2 [0] , R_3 [0]]) - np . min ([ R_0 [0] , R_1 [0] , R_2 [0] , R_3
            [0]]) ,
44                np . max ([ R_0 [1] , R_1 [1] , R_2 [1] , R_3 [1]]) - np . min ([ R_0 [1] , R_1 [1] , R_2 [1] , R_3
            [1]]) ,
45                np . max ([ R_0 [2] , R_1 [2] , R_2 [2] , R_3 [2]]) - np . min ([ R_0 [2] , R_1 [2] , R_2 [2] , R_3
            [2]])
46          ]) . max () / 2.0
47




                                                               45
     Orthogonal Vectors Generator                                                                   Generalized Implementation


48        mid_x = ( np . max ([ R_0 [0] , R_1 [0] , R_2 [0] , R_3 [0]]) + np . min ([ R_0 [0] , R_1 [0] , R_2 [0] ,
          R_3 [0]]) ) / 2
49        mid_y = ( np . max ([ R_0 [1] , R_1 [1] , R_2 [1] , R_3 [1]]) + np . min ([ R_0 [1] , R_1 [1] , R_2 [1] ,
          R_3 [1]]) ) / 2
50        mid_z = ( np . max ([ R_0 [2] , R_1 [2] , R_2 [2] , R_3 [2]]) + np . min ([ R_0 [2] , R_1 [2] , R_2 [2] ,
          R_3 [2]]) ) / 2
51
52         ax . set_xlim ( mid_x - max_range , mid_x + max_range )
53         ax . set_ylim ( mid_y - max_range , mid_y + max_range )
54         ax . set_zlim ( mid_z - max_range , mid_z + max_range )
55
56         if show_legend :
57             ax . legend ()
58
59         return fig , ax
60
61 # Note : This is a partial listing . The full visualization . py file contains additional
       functions
62 # such as p l o t _ v e c t o r s _ 2 d _ p r o j e c t i o n and p l o t _ a l l _ p r o j e c t i o n s that are omitted here for
       brevity .



     A.6        init .py
 1   # Generalized Orthogonal Vectors Generator and Visualizer
 2   # This package provides tools for generating and visualizing orthogonal vectors
 3
 4   from . vector_utils import create_orthogonal_vectors , c h e c k _ o r t h o g o n a l i t y
 5   from . visualization import plot_vectors_3d , plot_vectors_2d_projection ,
         plot_all_projections
 6   from . config import VectorConfig , defaul t_config
 7
 8 __all__ = [
 9     ’ create_orthogonal_vectors ’,
10     ’ check_orthogonality ’,
11     ’ p lo t_ ve c to rs _3 d ’ ,
12     ’ plot_vectors_2d_projection ’,
13     ’ plot_all_projections ’,
14     ’ VectorConfig ’ ,
15     ’ default_ config ’
16 ]
17
18   __version__ = ’ 1.0.0 ’




                                                                    46
